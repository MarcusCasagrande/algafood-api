#24.10 (docker) editandso o localhost pra variavel de ambiente DB_HOST e um fallback (:) caso nao tenha, que seja o localhost mesmo entao
spring.datasource.url=jdbc:mysql://${DB_HOST:localhost}:3306/algafood?createDatabaseIfNotExist=true&serverTimezone=UTC
spring.datasource.username=root
#spring.datasource.password=

#cria tabelas a partir das classes em model
#spring.jpa.generate-ddl=true
#dropa tudo e recria ao abrir a aplicacao (ok em dev, nao em prod)
#spring.jpa.hibernate.ddl-auto=create

# criar scripts de criacao de acordo com a camada de persistencia (s[o cria o script, sem executar)
# Comente ou remova essas duas propriuedades logo ap�s a criacao do DDL. S� precisamos disso para criar o arquivo uma unica vez
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/ddl.sql

#indica onde o flyway deve procurar os arquivos de mgracao
spring.flyway.locations=classpath:db/migration, classpath:db/dadosdeteste

spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect # usar dialeto ENGINE=InnoDB pra ter foreign key (aqui ja ta padrao)

# comprimir a resposta JSON (19.38)
server.compression.enabled=true
#server.compression.min-response-size=

# minimum é setado por default pra ser igual o maximum
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=3
# em ms. O minimo é esse mesmo (10 seg)
spring.datasource.hikari.idle-timeout=10000

# quando o JSON colocar uma propriedade desconhecida, vai dar excecao (por padrao, apenas ignora)
spring.jackson.deserialization.fail-on-unknown-properties=true
# falha tambem se por um campo existente, mas marcado no model como @JsonIgnore
spring.jackson.deserialization.fail-on-ignored-properties=true

# lanca excecao se nenhum handler de excecao for encontrado. Por exemplo, buscar um recurso nao existente: /restaaaaurates/10
spring.mvc.throw-exception-if-no-handler-found=true
# desabilita um resource handler que serve coisas da pasta resources/static (sei la pq)
spring.web.resources.add-mappings=false

#padrao é lower camel case
#spring.jackson.property-naming-strategy=SNAKE_CASE

#padrao do Spring é 1MB
#spring.servlet.multipart.max-file-size=20KB
#padrao do Spring é 10MB
#spring.servlet.multipart.max-request-size=20MB

#setando dir de uploads de fotos
algafood.storage.local.diretorio-fotos=/programas/JetBrains/catalogo

#props comentadas pois seram inseridas via boot dashboard
#botao direito no projeto -> modify run configurations -> colocar no environment variables
#algafood.storage.s3.id-chave-acesso=AKIASZLJ5IJRIIBWCONC
#algafood.storage.s3.chave-acesso-secreta=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
algafood.storage.s3.bucket=marcus-algafood-teste
algafood.storage.s3.regiao=us-east-1
algafood.storage.s3.diretorio-fotos=catalogo
#algafood.storage.tipo=s3

# remetente: marcus.r.casagrande@gmail.com
spring.mail.host=email-smtp.us-east-1.amazonaws.com
spring.mail.port=587
#spring.mail.username=AKIASZLJ5IJRPSAG4GM33 (env vars)
#spring.mail.password=BFRQrHyD1o6B378bNPm7HFMugrX3s7PLYC81DC1RcUZEE (env vars)

algafood.email.remetente=Marcus-food <marcus.r.casagrande@gmail.com>
algafood.email.impl=fake
algafood.email.sandbox.destinatario=marcus.xj220@gmail.com

# caso queira mudar o nome da pasta "resources/templates", usaria essa prop
#spring.freemarker.template-loader-path
#configuracao de locale pra fazer o currency mostrar valor em moeda local (, ao inves de . no decimal)
spring.freemarker.settings.locale=pt_BR

spring.mvc.pathmatch.matching-strategy = ANT_PATH_MATCHER

# loggly, nome criado aqui (21.4)
#logging.loggly.token=seu_customer_token_aqui (70d04b8b-c19b-439d-9180-ccd4d359548a) está em variavel de ambiente da aplicacao
#spring.profiles.active=production

#basic security user default (22.2).
#22.4: Não será mais usado aqui, e sim configurado no WebSecurityConfig
#spring.security.user.name=algafood
#spring.security.user.password=123456

# 22.11: diz qual o endpoint do authorization server pra checar se o token recebido pelo client é valido
#spring.security.oauth2.resourceserver.opaquetoken.introspection-uri=http://localhost:8081/oauth/check_token
# mesmo o auth-server estando configurado com "permitall()", nao requerindo que seja mandado o user e pass, nesse suporte do resource server do spring security isso nao funciona e precisa enviar mesmo assim (sneao gera erro na inicializacao)
#spring.security.oauth2.resourceserver.opaquetoken.client-id=algafood-web
#spring.security.oauth2.resourceserver.opaquetoken.client-secret=web123

# 23.6: removendo configuracoes de opaque token (acima) e configurando tokens jwt:
#tudo o que for de nivel DEBUG dentro desse pacote, agora vai aparecer no console. Assim podemos ver o erro do jwt ter um secret menor que 32 bites.
#logging.level.org.springframework=DEBUG

# (23.12) local da pkey (classpath: determina o caminho relativo ao projeto, file: caminho absoluto do sistema)
#spring.security.oauth2.resourceserver.jwt.public-key-location=classpath:keys/algafood-pkey.pem
# 23.45: nao usa mais o caminho da chave publica na linha acima. agora usa o suporte do spring ao JWKS abaixo:
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/.well-known/jwks.json

#jwt (23.5) (mas trazido e modificado do auth server: (23.41))
#algafood.jwt.keystore.jks-location=classpath:keys/algafood.jks
# 23.46: novo modo
algafood.jwt.keystore.jks-location=base64:MIIKqAIBAzCCClIGCSqGSIb3DQEHAaCCCkMEggo/MIIKOzCCBbIGCSqGSIb3DQEHAaCCBaMEggWfMIIFmzCCBZcGCyqGSIb3DQEMCgECoIIFQDCCBTwwZgYJKoZIhvcNAQUNMFkwOAYJKoZIhvcNAQUMMCsEFFT9nhChYz6AwZD+Bv+r3Qouv6btAgInEAIBIDAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQf5bvGcm4tiQD9il9AzqtpwSCBNDJur5hwpGdvdpsHAQ0uFBqMipId8ADSU/a+xWHp9THGPkx6hE7vdGN9RH9oT2K8bR47mLGWHStJ2rGUV3MuscIE5KOuq4G4KrHGmcXYZEw+SLlnyeWxGhl0gikyCxANsSC76Fy32PAf50KyzT/mWJVq2Bmp5bSi8z8McEq6D/nfZaEn0FUL5JpPBoJJOKuG7mFuAkuHba0xYeS4db5jOwQM6rwE5yOhfJG2ZnjwCmCkCL4WeN0abZSOytIp5Ih21joaE5V9LMbK5740tWiP3DPaKnzzvgQl3hpJUD/fcsbeWdhMcOLhKTmxoMckO7V4KM6Adkx5SSEhbSNAoFsEDpOKZrB6GlsvmxRt21Sj75CGdBFCNAAo01jAgT1bCVgCsi5jfyzgykb/bDv9sm5bMTtyGnJNLgEfMBjEbtkMGz+wGlMordjK7VIPqaXSBYMCZdmiYPZ8IECcNVS65BfdKkpVNDqbDUlGRTKgzwkJgwjxeKhDqdOvKqvJ5FZcIH55QLymNn7FzaeS45UZQcm9gT+N/Z9GSIdtwrKugp47Eal9pGOuYkYLduRBqI07qT7QPYDFambeJNrKCrFQoUhEmfpsDTa7yqSVJCxpaY4NaotbD/6wpGPm429gF4sHNbUKb0Oij0yeUQ9daEDT8lNcsc7aDN100ZVzULI2kdKe9BhN15rI47hzYPcDiYXtiefTtdNdOGt7VF9+Kq8NHNW6NLEN7e0MygFi2nxLEl4Pj2YUFETw1/fNo3k2qWk0bgaDjX0r/irtgD+GRxdruQtg1CPmL7HXB0D25LRLn3OUN7OMyRHjnaAUY4LbxgJjTQM3DY0OwytTAvqnnOD+QOn3oPSznfUEpnBZNVz8P5NcMHV+YJ9/jo0Bcdk7WGVbEI5XcLpH0gGUhWBIh/wxDpSUnr1GFx4bSm5Nq/vs23HpI1fEdTBvkj9ueaCmWY1h7UUII5NAk4QLsTw1KMHLStCbtucJxDEvVYLug7odDxnALL0f+Gmc2HYxGCQmPC5S9Wjor3IC/a18Q2pwqk6i/JyIWy/bzBlBIBFdleOfR3ADzDsUI/4k4qZL6/aVOgnwVeYxTPeJd32+xeASPCalkU6zEPv2n/LpaNoYTqEvKdNZ8M+9Q38NWfZ1xzcUqd6HgiSEytG6SzZFO8SHtikm+++OtronpC6biMB7WAepanA/ShoYfboVUSmyl0d/r8eLuzXxeb1GucBf7E7Vy69H6m7ZWqZGaNYHebwOd37zMUY4E+ucNxcmgN35zJolcWIaHvOpqq4k742YOREP8VgGXIibwaKU7f/vn7CJWcLEkC5qEA6glP5DKhZ2KLb1aPVSlCPx6FR4K68EzzISM9VHtxdrUP8dqKDKgn4Sb2roWLa8Nn3rydAiT4OOZ2cDad/f16WBYOhZW7RklVjYiQPhXJPcD7z7CcBEsgB5jmMJUqq34jgmdq+MIGPUxp+GqDA6zUZeG7A+peY+1lnqEuInfC90L3fyZPSHYb1hbrUdSPMM1ZFqtaFbC4YPg2kC1GCknXqjP0AP0WkEt89lp/bce/GT6h4c+Hq4KvpBMp/bn4fXnoUx9WRogBCayF8HFar+Q2B4cQLn+hgzMNB5BkwgrBGH5bufoOvJKTgFD43qW7DTx5p+jFEMB8GCSqGSIb3DQEJFDESHhAAYQBsAGcAYQBmAG8AbwBkMCEGCSqGSIb3DQEJFTEUBBJUaW1lIDE2NzExNTc0MjQ4MDMwggSBBgkqhkiG9w0BBwagggRyMIIEbgIBADCCBGcGCSqGSIb3DQEHATBmBgkqhkiG9w0BBQ0wWTA4BgkqhkiG9w0BBQwwKwQU5/rH70G/0ecXSeACUYDQTzxAbf4CAicQAgEgMAwGCCqGSIb3DQIJBQAwHQYJYIZIAWUDBAEqBBD2Y5+PnlFuOsEa8Kt4zET2gIID8DjKX9rTYFEdTZmgZMq8cHZxKWpUqlIo7PIqibZOZ8xhjTi4C/AEln1Yg5VrY8ttM9Rb5fxGJZdU5MrjoF5EDYOG/e0rRq+/lFz1rI5HJi28tnylYBeyeUvNJO6REKYRJaBug/QqVbnesM9BgwxLYI7JNZi1sQWQ1q7xnrSjZOapQfXFh/yzkGitOsmhvlS0GtJDerhwf8xyW/s9SCTrSbKjCnb4BLRtFkJ6GT6gM1EuBK/1oyHA+rHzENbBWL+++foOjTKlQ51mE05lhCqBDSCxe1PY8QXnZgZZ0khHIxp0F8W1vyIjMbP/hRwKCtba1UDN4tEUtIgbga4au5a5ACkvUuR4k2pQMUIN5jKr0H1NkU1rFyBckNnj4aCOHX6lVqXy6zZYl3WLk7KB/79SCBx3R/gD4r8NJh1cOmnpDpAK/YRDbFzeygX75FvN2LAQf8Ixabs/AZik03V4Rzi+wUwYLYTZwzxRt+OLG9MTr8dlneC5kxbOE30fFeDWYim0YIw3hizDW6Vq1FZ8hciek2kGK/Pj7wD3vXofe5OL3DOLMyU36T/tWC69kcr/PN6X67Sh38HGP4qPncxcvb3SFiwN918Jv1tYVO/yIIuPnJfwlccQqNyzAJiiuoQhjNbYELIKV92Nhl1Ij3qWkkr8R7vB5NtvDydqA95qLDPDaCBp8/qbRkE9/MAwYIsJ2e9f/THWggRVn/LN4IvzQ+zUZ2chRFCn0dMfHQqPkTVktxabJlUwStj34PBZNajvOgdud5z0NU572CzpUQxVEvPnzXH2xC4J67w9qK59Z87hRbe4rBWQhJR5ptoguudVTt4yTEISmAMinneti/IrWJyVZUk5LoP21GqR6A5puRSRX3T4GxAhHB7aN9y/jb4ANzZ/o7a6OgshR2NiX5+7mfMX2/JI03nFkOwNK/2sXYClp02d+I6XJ4WNhhxZaqcWqSWWBrGk/sjiYEP+8xQ4hKXNpvqhkGzVTOI9MtTUJQGnGY4UP/FwBdopTt1b9lBzLMtWA6oh4d8/0/Ov/BvjXPfduhdgAjCmv6ok0AVnXDUleFFYFkm+Atwi9zn0juJAEHavOgsATsWZ3G6c1rSOnWbyQBphuDf81EgJYi5bGmWjwq71RKslkebRRz3mWvpxEvJh6WXo5n/BfdnYODaGyiUJv5WvBXz84eQVxU6GeqwxaDm6w+GQpyRB4G9+foIYhmXCF0NIXOeqSn9n+cGmapUKm6JURyVJyNhdQ86ye/QEPxdhefQ1xrPqG6fIGrxWE8L4W5r+n8kSeU6mXAQkkBF+WKb9n4KM3BFDZh2y5Uu0i1uI5XIGupZa5m+rZmwHY/lKwjBNMDEwDQYJYIZIAWUDBAIBBQAEIPKX7oOXxlgPMnV12gBD2eW0fMcln4N8tKb5AspX40JSBBT5+aEi/qaFmhXM8s49AYKjK4ICMQICJxA=
algafood.jwt.keystore.password=1234567
algafood.jwt.keystore.keypairAlias=algafood

# comando pra criar o arquivo pem (certificado + chave publica) do arquivo jks:
# keytool -export -rfc -alias algafood -keystore algafood.jks -file algafood-cert.pem




